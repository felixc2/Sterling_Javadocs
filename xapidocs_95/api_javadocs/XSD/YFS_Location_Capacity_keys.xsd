<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema attributeFormDefault="unqualified"
    elementFormDefault="qualified"
    targetNamespace="http://www.sterlingcommerce.com/documentation/YFS/Location_Capacity_keys"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:yfc="http://www.sterlingcommerce.com/documentation/YFS/Location_Capacity_keys" xmlns:yfctype="http://www.sterlingcommerce.com/documentation/types">
    <xsd:annotation yfc:fileName="YFS_Location_Capacity_keys.xsd" yfc:rootElement="LocationCapacity">
        <xsd:appinfo source="yfc:structure">
            <LocationCapacity hasAttributes="Y"/>
        </xsd:appinfo>
    </xsd:annotation>
    <xsd:import
        namespace="http://www.sterlingcommerce.com/documentation/types" schemaLocation="datatypes.xsd"/>
    <xsd:element name="LocationCapacity" type="yfc:LocationCapacityXSDType">
        <xsd:annotation yfc:tableName="YFS_LOCATION_CAPACITY">
            <xsd:documentation>Each location has a certain capacity in terms of number of packages of certain packaging type. Item has dimensions and so has the location (size code). We could very easily have computed the location capacity by volume of item versus the volume of the location. If you notice, we have classified locations as belonging to locations of a certain size type and then associated dimensions with the size type. This significantly reduces the amount of data that needs to be configured. Similarly, we would need to classify items into categories for purposes of capacity calculations, so that we have lesser data to configure. For example, all items coming in a 2 feet * 2 feet * 2 feet box can be classified as having a capacity code of 2 feet cube packaged as a carton (packaging type). Similarly we could have the same item coming in a 6 * 6 * 6 feet pallet, which could be classified as 6 feet cube pallet. What is defined here is how many such packages can fit within the location of a particular size code. If this is not setup here at the item classification level, then capacity computation is done using volumes of the item versus volume of the location.</xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="LocationCapacityXSDType">
        <xsd:attribute name="LocationCapacityKey" type="yfctype:Key" use="optional">
            <xsd:annotation yfc:columnName="LOCATION_CAPACITY_KEY" yfc:tableName="YFS_LOCATION_CAPACITY">
                <xsd:documentation>The primary key for the YFS_LOCATION_CAPACITY table.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>
</xsd:schema>
