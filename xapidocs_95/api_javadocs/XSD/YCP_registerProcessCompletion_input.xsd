<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema attributeFormDefault="unqualified"
    elementFormDefault="qualified"
    targetNamespace="http://www.sterlingcommerce.com/documentation/YCP/registerProcessCompletion/input"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:yfc="http://www.sterlingcommerce.com/documentation/YCP/registerProcessCompletion/input" xmlns:yfctype="http://www.sterlingcommerce.com/documentation/types">
    <xsd:annotation
        yfc:fileName="YCP_registerProcessCompletion_input.xsd" yfc:rootElement="RegisterProcessCompletionInput">
        <xsd:appinfo source="yfc:structure">
            <RegisterProcessCompletionInput hasAttributes="Y">
                <CurrentTask hasAttributes="Y"/>
                <WorkFlowMessageData hasAttributes="Y">
                    <WorkFlowMessageLineList>
                        <WorkFlowMessageLine hasAttributes="Y">
                            <MapKeys/>
                        </WorkFlowMessageLine>
                    </WorkFlowMessageLineList>
                </WorkFlowMessageData>
            </RegisterProcessCompletionInput>
        </xsd:appinfo>
    </xsd:annotation>
    <xsd:import
        namespace="http://www.sterlingcommerce.com/documentation/types" schemaLocation="datatypes.xsd"/>
    <xsd:element name="RegisterProcessCompletionInput" type="yfc:RegisterProcessCompletionInputXSDType">
        <xsd:annotation>
            <xsd:documentation>
                <div>
				This node must be passed as the root node of the input XML.
				</div>
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="RegisterProcessCompletionInputXSDType">
        <xsd:all>
            <xsd:element maxOccurs="1" minOccurs="1" ref="yfc:CurrentTask"/>
            <xsd:element maxOccurs="1" minOccurs="0" ref="yfc:WorkFlowMessageData"/>
        </xsd:all>
        <xsd:attribute name="KeepTaskOpen" type="yfctype:Flag" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    <div>
					Indicates if task needs to be kept open. This attribute must be passed.
						<Validation>
                            <Condition> If <code>KeepTaskOpen</code> is void:</Condition>
                            <Error
                                Description="Input document is empty or contains invalid data" ErrorCode="YFS10363"/>
                            <Error
                                Description="Mandatory parameters for the operation are missing" ErrorCode="YFS10364"/>
                        </Validation>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="NewTaskDate" type="yfctype:Date" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    <div>
					Specifies the date until when this task need not be reprocessed.
						<br/>Default: current system date
						<br/>Valid Values: date in the XML valid date format
					</div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>
    <xsd:element name="CurrentTask">
        <xsd:annotation yfc:tableName="YFS_TASK_Q">
            <xsd:documentation>
                <div>
				Stores tasks that need to be performed by various time-triggered transactions. These tasks are created as a result of documents reaching a certain status within a process model. This node should be passed with a non-void <code>TaskQKey</code> attribute.
				</div>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="AvailableDate" type="yfctype:TimeStamp" use="optional">
                <xsd:annotation yfc:columnName="AVAILABLE_DATE" yfc:tableName="YFS_TASK_Q">
                    <xsd:documentation>The date when tasks are ready to be processed.</xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="DataKey" type="yfctype:Key" use="optional">
                <xsd:annotation yfc:columnName="DATA_KEY" yfc:tableName="YFS_TASK_Q">
                    <xsd:documentation>The document identifier.</xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="DataType"
                type="yfctype:DocumentEntityType" use="optional">
                <xsd:annotation yfc:columnName="DATA_TYPE" yfc:tableName="YFS_TASK_Q">
                    <xsd:documentation>The type of document or entity.</xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="TaskQKey" type="yfctype:Key" use="required">
                <xsd:annotation yfc:columnName="TASK_Q_KEY" yfc:tableName="YFS_TASK_Q">
                    <xsd:documentation>
                        <div>
					The primary key attribute of YFS_TASK_Q.
						<br/>Valid Values: the <code>TaskQKey</code> of the relevant record
					</div>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="TransactionKey" type="yfctype:Key" use="optional">
                <xsd:annotation yfc:columnName="TRANSACTION_KEY" yfc:tableName="YFS_TASK_Q">
                    <xsd:documentation>The transaction that should be activated.</xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="WorkFlowMessageData">
        <xsd:annotation>
            <xsd:documentation>
                <div>
					This element can also be passed if new tasks have to be created for transactions that work off the YFS_TASK_Q
					table, and also if messages need to be passed to other pipelines if pipeline listeners are configured.
					If <code>WorkFlowMessageData</code> and its children nodes are passed, the <code>MapKeys</code> node must have at least one attribute with Entity Table Name and Key Value (that is, YFS_SHIPMENT="ShipmentKeyValue".
					<code>MapKeys</code> can, however, have any number of additional name-value pairs.
					</div>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:all>
                <xsd:element maxOccurs="1" minOccurs="0" ref="yfc:WorkFlowMessageLineList"/>
            </xsd:all>
            <xsd:attribute name="EntityKey" type="yfctype:Key" use="optional">
                <xsd:annotation>
                    <xsd:documentation>
                        <div>
							A Key to some entity.
							<br/> Valid Values: The PrimaryKey of the relevant entity. For example, the Shipment_Key value for the Order_Delivery pipeline.
						</div>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="WorkFlowMessageLineList">
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element maxOccurs="unbounded" minOccurs="0" ref="yfc:WorkFlowMessageLine"/>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="WorkFlowMessageLine">
        <xsd:annotation>
            <xsd:documentation>
                <div>
						This node can also be passed if new tasks have to be created for transactions that work off the YFS_TASK_Q
						table, and also if messages need to be passed to other pipelines if pipeline listeners are configured.
						If <code>WorkFlowMessageLine</code> is passed, then it should have at least the following attributes filled: <code>PipelineKey</code>, <code>DropStatus</code>, <code>Quantity</code>.
						</div>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:all>
                <xsd:element maxOccurs="1" minOccurs="0" ref="yfc:MapKeys"/>
            </xsd:all>
            <xsd:attribute name="DropStatus" type="yfctype:ShortStatus" use="optional">
                <xsd:annotation yfc:columnName="EXTENDED_DROP_STATUS" yfc:tableName="YFS_PIPELINE_DROP_STS_COND">
                    <xsd:documentation>
                        <div>
									Occasionally, transactions may drop to various statuses based on the conditions configured. This field provides the status to which a transaction really drops.
									<br/> Valid Values: Drop Status to which the line is being moved.
								</div>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="FromStatus" type="yfctype:ShortStatus" use="optional">
                <xsd:annotation yfc:columnName="STATUS" yfc:tableName="YFS_PIPELINE_PICKUP_TRAN">
                    <xsd:documentation>
                        <div>
									Pick up status.
									<br/> Valid Values: Status from which the line is being moved.
								</div>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="PipelineKey" type="yfctype:Key" use="optional">
                <xsd:annotation yfc:columnName="PIPELINE_KEY" yfc:tableName="YFS_PIPELINE">
                    <xsd:documentation>
                        <div>
									Primary key attribute of YFS_PIPELINE.
									<br/> Valid Values: Pipeline_Key of the process_type for which the transaction attempts to register completion.
								</div>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Quantity" type="yfctype:Quantity" use="optional">
                <xsd:annotation>
                    <xsd:documentation>
                        <div>
								The quantity moved between the two statuses.
								<br/> Valid Values: Quantity of the line being moved.
							</div>
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="MapKeys">
        <xsd:annotation>
            <xsd:documentation>
                <div>
							This node contains name-value pairs for information related to the main entity used at the time of updating other listening pipelines. At the very least, this element should have a name-value pair corresponding to the primary entity table. For example, YFS_SHIPMENT="" if for the ORDER_DELIVERY process_type.
							If <code>WorkFlowMessageData</code> and its children nodes are passed, the <code>MapKeys</code> node must have at least one attribute with Entity Table Name and Key Value (that is, YFS_SHIPMENT="ShipmentKeyValue".
							<code>MapKeys</code> can, however, have any number of additional name-value pairs.
							</div>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType/>
    </xsd:element>
</xsd:schema>
