<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema attributeFormDefault="unqualified"
    elementFormDefault="qualified"
    targetNamespace="http://www.sterlingcommerce.com/documentation/YFS/getAuditList/input"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:yfc="http://www.sterlingcommerce.com/documentation/YFS/getAuditList/input" xmlns:yfctype="http://www.sterlingcommerce.com/documentation/types">
    <xsd:annotation yfc:fileName="YFS_getAuditList_input.xsd" yfc:rootElement="Audit">
        <xsd:appinfo source="yfc:structure">
            <Audit hasAttributes="Y"/>
        </xsd:appinfo>
    </xsd:annotation>
    <xsd:import
        namespace="http://www.sterlingcommerce.com/documentation/types" schemaLocation="datatypes.xsd"/>
    <xsd:element name="Audit" type="yfc:AuditXSDType">
        <xsd:annotation yfc:tableName="YFS_AUDIT">
            <xsd:documentation>This table stores the audit record for entities that require an audit. A record for every update and delete for the 'audited' entity will be inserted in this table.</xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="AuditXSDType">
        <xsd:attribute name="AuditContextId" type="yfctype:Identifier" use="optional">
            <xsd:annotation yfc:columnName="AUDIT_CONTEXT_ID" yfc:tableName="YFS_AUDIT">
                <xsd:documentation>The unique identifier for the context in which an audit record is created. The context can either be an API call or a user exit. The value starts at 0 and will get incremented when an API or a user exit is called from the originating API. Once the called API or user exit has terminated, the value get decremented.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="AuditKey" type="yfctype:Key" use="optional">
            <xsd:annotation yfc:columnName="AUDIT_KEY" yfc:tableName="YFS_AUDIT">
                <xsd:documentation>Key of the record</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="AuditTranKey" type="yfctype:Key" use="optional">
            <xsd:annotation yfc:columnName="AUDIT_TRAN_KEY" yfc:tableName="YFS_AUDIT">
                <xsd:documentation>Unique key of the transaction.  A transaction may have multiple api's</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ColonyId" type="yfctype:ColonyId" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    <div>Return data that exists in the same schema as the the given ColonyId.
    				Note this is not a filter. If multiple colonies share the same schema,
    				the output may contain data from all of them.</div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="Reference1"
            type="yfctype:ReferenceValue-255" use="optional">
            <xsd:annotation yfc:columnName="REFERENCE_1" yfc:tableName="YFS_AUDIT">
                <xsd:documentation>Reference value for the transaction</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="Reference2" type="yfctype:ReferenceValue" use="optional">
            <xsd:annotation yfc:columnName="REFERENCE_2" yfc:tableName="YFS_AUDIT">
                <xsd:documentation>Reference value for the transaction</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="Reference3" type="yfctype:ReferenceValue" use="optional">
            <xsd:annotation yfc:columnName="REFERENCE_3" yfc:tableName="YFS_AUDIT">
                <xsd:documentation>Reference value for the transaction</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="Reference4" type="yfctype:ReferenceValue" use="optional">
            <xsd:annotation yfc:columnName="REFERENCE_4" yfc:tableName="YFS_AUDIT">
                <xsd:documentation>Reference value for the transaction</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="Reference5"
            type="yfctype:ReferenceValue-200" use="optional">
            <xsd:annotation yfc:columnName="REFERENCE_5" yfc:tableName="YFS_AUDIT">
                <xsd:documentation>Reference value for the transaction</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="Reference6" type="yfctype:ReferenceValue" use="optional">
            <xsd:annotation yfc:columnName="REFERENCE_6" yfc:tableName="YFS_AUDIT">
                <xsd:documentation>Reference value for the transaction</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="TableKey" type="yfctype:Key" use="optional">
            <xsd:annotation yfc:columnName="TABLE_KEY" yfc:tableName="YFS_AUDIT">
                <xsd:documentation>Audit record is created for table name and table key combination</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="TableName" type="yfctype:TableName" use="optional">
            <xsd:annotation yfc:columnName="TABLE_NAME" yfc:tableName="YFS_AUDIT">
                <xsd:documentation>Audit record is created for table name and table key combination</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="TableType" type="yfctype:TableType" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    <div>Return data for the given table type. Note this is not a filter.
    				If the resulting schema contains multiple table types, the output may
    				contain data from all of them.</div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>
</xsd:schema>
